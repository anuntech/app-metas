#!/usr/bin/env node

/**
 * üß™ TESTE DO ENDPOINT DE SERVIR PDF
 * 
 * Este script testa o novo endpoint /api/pdf/serve/[filename]
 * que serve PDFs dinamicamente sem depender de arquivos est√°ticos.
 * 
 * Usage: node scripts/test-pdf-serve-endpoint.js
 */

require('dotenv').config();

async function testPDFServeEndpoint() {
  console.log('üß™ TESTE DO ENDPOINT DE SERVIR PDF');
  console.log('=' .repeat(50));
  console.log(`üïê Iniciado em: ${new Date().toLocaleString('pt-BR')}\n`);

  const baseUrl = 'http://localhost:3000';

  try {
    // 1. Primeiro, gerar um PDF via daily-report
    console.log('üìÑ 1. GERANDO PDF VIA DAILY-REPORT...');
    
    const generateResponse = await fetch(`${baseUrl}/api/pdf/daily-report`);
    
    if (!generateResponse.ok) {
      const errorText = await generateResponse.text();
      console.log(`‚ùå Erro ao gerar PDF: ${generateResponse.status} - ${errorText}`);
      return;
    }

    const generateResult = await generateResponse.json();
    
    if (!generateResult.success) {
      console.log(`‚ùå Falha na gera√ß√£o: ${generateResult.error}`);
      return;
    }

    console.log(`‚úÖ PDF gerado: ${generateResult.data.filename}`);
    console.log(`üîó URL retornada: ${generateResult.data.publicUrl}`);

    // 2. Testar o novo endpoint diretamente
    const filename = generateResult.data.filename;
    const serveUrl = `${baseUrl}/api/pdf/serve/${filename}`;
    
    console.log(`\nüìã 2. TESTANDO ENDPOINT DE SERVIR PDF...`);
    console.log(`üîó URL do endpoint: ${serveUrl}`);

    const serveResponse = await fetch(serveUrl, { method: 'HEAD' });
    
    console.log(`üìä Status da resposta: ${serveResponse.status}`);
    console.log(`üìã Headers da resposta:`);
    
    serveResponse.headers.forEach((value, key) => {
      console.log(`   ${key}: ${value}`);
    });

    if (serveResponse.ok) {
      console.log('‚úÖ ENDPOINT FUNCIONANDO! PDF √© acess√≠vel');
      
      // 3. Testar download real
      console.log(`\nüì• 3. TESTANDO DOWNLOAD COMPLETO...`);
      
      const fullResponse = await fetch(serveUrl);
      
      if (fullResponse.ok) {
        const buffer = await fullResponse.arrayBuffer();
        console.log(`‚úÖ PDF baixado com sucesso! Tamanho: ${buffer.byteLength} bytes`);
        
        // Verificar se √© realmente um PDF
        const uint8Array = new Uint8Array(buffer);
        const pdfHeader = uint8Array.slice(0, 4);
        const headerString = String.fromCharCode(...pdfHeader);
        
        if (headerString === '%PDF') {
          console.log('‚úÖ Arquivo √© um PDF v√°lido!');
        } else {
          console.log(`‚ùå Arquivo n√£o parece ser um PDF. Header: ${headerString}`);
        }
      } else {
        console.log(`‚ùå Erro no download completo: ${fullResponse.status}`);
      }

    } else {
      const errorText = await serveResponse.text();
      console.log(`‚ùå ENDPOINT N√ÉO EST√Å FUNCIONANDO: ${serveResponse.status} - ${errorText}`);
    }

    // 4. Testar com filename diferente
    console.log(`\nüîß 4. TESTANDO COM FILENAME GEN√âRICO...`);
    
    const genericUrl = `${baseUrl}/api/pdf/serve/painel-resultados-2025-07-ate-2025-07-15.pdf`;
    console.log(`üîó URL gen√©rica: ${genericUrl}`);
    
    const genericResponse = await fetch(genericUrl, { method: 'HEAD' });
    
    if (genericResponse.ok) {
      console.log('‚úÖ Endpoint funciona com filename gen√©rico tamb√©m!');
    } else {
      console.log(`‚ö†Ô∏è  Endpoint n√£o funciona com filename gen√©rico: ${genericResponse.status}`);
    }

    // 5. Resumo
    console.log('\n' + '='.repeat(50));
    console.log('üìä RESUMO DO TESTE:');
    console.log('=' .repeat(50));
    
    if (serveResponse.ok) {
      console.log('‚úÖ Endpoint /api/pdf/serve/[filename] est√° funcionando!');
      console.log('‚úÖ PDF pode ser acessado dinamicamente');
      console.log('üöÄ Pronto para usar em produ√ß√£o!');
      
      console.log('\nüîó URL completa para produ√ß√£o seria:');
      console.log(`   https://app-metas-production.up.railway.app/api/pdf/serve/${filename}`);
      
    } else {
      console.log('‚ùå Endpoint n√£o est√° funcionando corretamente');
      console.log('üîß Verifique se o servidor est√° rodando');
      console.log('üîß Verifique se n√£o h√° erros no console do Next.js');
    }

  } catch (error) {
    console.log(`‚ùå Erro no teste: ${error.message}`);
    console.log('\nüîß VERIFICA√á√ïES:');
    console.log('1. O servidor Next.js est√° rodando? (npm run dev)');
    console.log('2. A porta 3000 est√° livre?');
    console.log('3. N√£o h√° erros de compila√ß√£o?');
  }

  console.log(`\nüïê Finalizado em: ${new Date().toLocaleString('pt-BR')}`);
}

if (require.main === module) {
  testPDFServeEndpoint();
}

module.exports = { testPDFServeEndpoint }; 