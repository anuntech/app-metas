#!/usr/bin/env node

/**
 * üß™ TESTE COM URL DE PRODU√á√ÉO
 * 
 * Este script testa o envio de PDF usando a URL de produ√ß√£o
 * para que a API do WTS consiga acessar o arquivo.
 * 
 * Usage: node scripts/test-with-production-url.js
 */

require('dotenv').config();

async function testWithProductionURL() {
  console.log('üß™ TESTE DE PDF COM URL DE PRODU√á√ÉO');
  console.log('=' .repeat(50));
  console.log(`üïê Iniciado em: ${new Date().toLocaleString('pt-BR')}\n`);

  // Verificar se temos URL de produ√ß√£o
  const productionUrl = process.env.NEXTAUTH_URL;
  
  if (!productionUrl || productionUrl.includes('localhost')) {
    console.log('‚ùå NEXTAUTH_URL n√£o est√° configurada para produ√ß√£o!');
    console.log('\nüîß Para corrigir:');
    console.log('1. Configure NEXTAUTH_URL=https://sua-app.vercel.app (ou outro dom√≠nio)');
    console.log('2. Ou use ngrok para expor localhost publicamente');
    console.log('\nüí° Exemplo com ngrok:');
    console.log('   npx ngrok http 3000');
    console.log('   Depois configure NEXTAUTH_URL=https://abc123.ngrok.io');
    return;
  }

  console.log(`üåç URL de produ√ß√£o: ${productionUrl}`);

  // Pegar apenas o primeiro n√∫mero da lista
  const phoneList = process.env.WTS_TO_PHONE.split(',').map(phone => phone.trim());
  const testPhone = phoneList[0];

  try {
    // 1. Gerar PDF usando a API de produ√ß√£o
    console.log('\nüìÑ Gerando PDF via API...');
    const pdfResponse = await fetch(`${productionUrl}/api/pdf/daily-report`);
    
    if (!pdfResponse.ok) {
      console.log('‚ùå Erro ao gerar PDF');
      return;
    }

    const pdfResult = await pdfResponse.json();
    
    if (!pdfResult.success) {
      console.log('‚ùå Falha na gera√ß√£o do PDF');
      return;
    }

    const fullPdfUrl = `${productionUrl}/api/pdf/serve/${pdfResult.data.filename}`;
    console.log(`‚úÖ PDF gerado: ${pdfResult.data.filename}`);
    console.log(`üîó URL p√∫blica (endpoint din√¢mico): ${fullPdfUrl}`);

    // 2. Verificar se a URL √© acess√≠vel
    console.log('\nüîç Verificando se o PDF √© acess√≠vel...');
    const testResponse = await fetch(fullPdfUrl, { method: 'HEAD' });
    
    if (!testResponse.ok) {
      console.log(`‚ùå PDF n√£o √© acess√≠vel publicamente! Status: ${testResponse.status}`);
      return;
    }
    
    console.log('‚úÖ PDF √© acess√≠vel publicamente!');

    // 3. Enviar via WhatsApp
    console.log('\nüì± Enviando PDF via WhatsApp...');
    
    const wtsConfig = {
      url: process.env.EXTERNAL_API_URL,
      authToken: process.env.EXTERNAL_API_AUTH_TOKEN,
      fromPhone: process.env.WTS_FROM_PHONE,
      messageText: 'üß™ TESTE DE PDF COM URL P√öBLICA - Relat√≥rio di√°rio'
    };

    const payload = {
      body: {
        text: wtsConfig.messageText,
        fileUrl: fullPdfUrl
      },
      from: wtsConfig.fromPhone,
      to: testPhone
    };

    console.log('üìã Payload:');
    console.log(JSON.stringify(payload, null, 2));

    const response = await fetch(wtsConfig.url, {
      method: 'POST',
      headers: {
        'Authorization': wtsConfig.authToken,
        'accept': 'application/json',
        'content-type': 'application/*+json'
      },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.log(`‚ùå Erro na API WTS: ${errorText}`);
      return;
    }

    const result = await response.json();
    console.log('\n‚úÖ PDF enviado para WTS!');
    console.log('Resposta:', JSON.stringify(result, null, 2));

    // 4. Monitorar status
    if (result.statusUrl) {
      const fullStatusUrl = result.statusUrl.startsWith('http') 
        ? result.statusUrl 
        : `https://api.wts.chat${result.statusUrl}`;

      console.log('\nüîç Monitorando entrega...');
      
      for (let i = 0; i < 6; i++) { // 6 tentativas = ~1.5 minutos
        await new Promise(resolve => setTimeout(resolve, 15000)); // 15 segundos
        
        try {
          const statusResponse = await fetch(fullStatusUrl, {
            method: 'GET',
            headers: {
              'Authorization': wtsConfig.authToken,
              'accept': 'application/json'
            }
          });

          if (statusResponse.ok) {
            const statusData = await statusResponse.json();
            console.log(`üìä Tentativa ${i + 1}: ${statusData.status}`);
            
            if (statusData.status === 'DELIVERED' || statusData.status === 'READ') {
              console.log('üéâ PDF ENTREGUE COM SUCESSO!');
              break;
            } else if (statusData.status === 'FAILED' || statusData.status === 'ERROR') {
              console.log('‚ùå PDF falhou na entrega:');
              console.log(JSON.stringify(statusData, null, 2));
              break;
            }
          }
        } catch (error) {
          console.log(`‚ùå Erro ao verificar status: ${error.message}`);
        }
      }
    }

    console.log('\nüéØ CONCLUS√ÉO:');
    console.log('‚úÖ Sistema est√° funcionando quando usa URL p√∫blica!');
    console.log('üí° Certifique-se de que NEXTAUTH_URL est√° configurada para produ√ß√£o.');

  } catch (error) {
    console.log(`‚ùå Erro: ${error.message}`);
  }
}

// Verificar configura√ß√£o antes de executar
if (!process.env.EXTERNAL_API_URL || !process.env.WTS_FROM_PHONE || !process.env.WTS_TO_PHONE) {
  console.log('‚ùå CONFIGURA√á√ÉO INCOMPLETA!');
  process.exit(1);
}

if (require.main === module) {
  testWithProductionURL();
}

module.exports = { testWithProductionURL }; 